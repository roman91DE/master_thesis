graph TD
subgraph Pre-Trained DAE-GP
    subgraph Pre-Training Phase
        pt_start([Start])
        -->
        pt_init_pop[initialize pre-training population P&#770] 
        --> 
        pt_split_pop[randomly split P&#770 into P&#770<sub>train</sub> and P&#770<sub>test</sub>]
        -->
        pt_model_building[train DAE-LSTM model M&#770 to learn the properties of P&#770<sub>train</sub> until validation error for P&#770<sub>test</sub> converges]
        -->
        pt_model_return([return the state of the trainable parameters θ<sub>M&#770</sub>])
    end
    subgraph DAE-GP Phase
        start([Start])
        -->
        init_gen[g = 0] 
        -->
        init_pop[initialize population P<sub>0</sub>]
        -->
        main_loop{termination criteria met?}
            --Yes--> 
                return([return best solution found])
        main_loop{termination criteria met?}    
            --No--> 
                fitness_eval[Evaluate fitness for each new solution in P<sub>g</sub>]
                --> 
                selection[select solutions from P<sub>g</sub> for the training population X<sub>g</sub>]
                --> 
                model_loading[Initialize DAE-LSTM model M<sub>g</sub> with θ<sub>M&#770</sub>]
                -->
                model_building[train M<sub>g</sub> to learn the properties of X<sub>g</sub>]
                -->
                model_sampling[sample new population P<sub>g+1</sub> from M<sub>g</sub>]
                --> 
                next_gen[g += 1]
                -->
                main_loop
        
    end
    pt_model_return-->start
    pt_model_return -.-> model_loading
end
